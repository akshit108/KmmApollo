// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.InputFieldMarshaller
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.Transient
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException
import type.CustomType

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class UserQuery(
  val id: String
) : Query<UserQuery.Data, UserQuery.Data, Operation.Variables> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      this["id"] = this@UserQuery.id
    }

    override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller.invoke { writer ->
      writer.writeString("id", this@UserQuery.id)
    }
  }

  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = variables
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  data class IdentityProof(
    val __typename: String = "IdentityProof",
    /**
     * Identity Proof Result
     */
    val result: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@IdentityProof.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@IdentityProof.result)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("result", "result", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): IdentityProof = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val result = readString(RESPONSE_FIELDS[1])!!
        IdentityProof(
          __typename = __typename,
          result = result
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<IdentityProof> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class SelfDisclosure(
    val __typename: String = "SelfDisclosure",
    /**
     * Users Contract Type
     */
    val hasPermanentContract: Boolean?,
    /**
     * Users Contract end date
     */
    val employedUntil: String?,
    /**
     * Users Contract start date
     */
    val employedSince: String?,
    /**
     * Users Amount of income
     */
    val incomeNet: Int?,
    /**
     * Users Amount of other income
     */
    val incomeOther: Int?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@SelfDisclosure.__typename)
      writer.writeBoolean(RESPONSE_FIELDS[1], this@SelfDisclosure.hasPermanentContract)
      writer.writeString(RESPONSE_FIELDS[2], this@SelfDisclosure.employedUntil)
      writer.writeString(RESPONSE_FIELDS[3], this@SelfDisclosure.employedSince)
      writer.writeInt(RESPONSE_FIELDS[4], this@SelfDisclosure.incomeNet)
      writer.writeInt(RESPONSE_FIELDS[5], this@SelfDisclosure.incomeOther)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forBoolean("hasPermanentContract", "hasPermanentContract", null, true,
              null),
          ResponseField.forString("employedUntil", "employedUntil", null, true, null),
          ResponseField.forString("employedSince", "employedSince", null, true, null),
          ResponseField.forInt("incomeNet", "incomeNet", null, true, null),
          ResponseField.forInt("incomeOther", "incomeOther", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): SelfDisclosure = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val hasPermanentContract = readBoolean(RESPONSE_FIELDS[1])
        val employedUntil = readString(RESPONSE_FIELDS[2])
        val employedSince = readString(RESPONSE_FIELDS[3])
        val incomeNet = readInt(RESPONSE_FIELDS[4])
        val incomeOther = readInt(RESPONSE_FIELDS[5])
        SelfDisclosure(
          __typename = __typename,
          hasPermanentContract = hasPermanentContract,
          employedUntil = employedUntil,
          employedSince = employedSince,
          incomeNet = incomeNet,
          incomeOther = incomeOther
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<SelfDisclosure> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Scoring(
    val __typename: String = "Scoring",
    /**
     * Scoring result
     */
    val result: Int?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Scoring.__typename)
      writer.writeInt(RESPONSE_FIELDS[1], this@Scoring.result)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forInt("result", "result", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Scoring = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val result = readInt(RESPONSE_FIELDS[1])
        Scoring(
          __typename = __typename,
          result = result
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Scoring> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class MailingAddress(
    val __typename: String = "Address",
    /**
     * Street of the Address
     */
    val street: String,
    /**
     * PostalCode of the Address
     */
    val postalCode: String,
    /**
     * City of the Address
     */
    val city: String,
    /**
     * Country of the Address
     */
    val country: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@MailingAddress.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@MailingAddress.street)
      writer.writeString(RESPONSE_FIELDS[2], this@MailingAddress.postalCode)
      writer.writeString(RESPONSE_FIELDS[3], this@MailingAddress.city)
      writer.writeString(RESPONSE_FIELDS[4], this@MailingAddress.country)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("street", "street", null, false, null),
          ResponseField.forString("postalCode", "postalCode", null, false, null),
          ResponseField.forString("city", "city", null, false, null),
          ResponseField.forString("country", "country", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): MailingAddress = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val street = readString(RESPONSE_FIELDS[1])!!
        val postalCode = readString(RESPONSE_FIELDS[2])!!
        val city = readString(RESPONSE_FIELDS[3])!!
        val country = readString(RESPONSE_FIELDS[4])!!
        MailingAddress(
          __typename = __typename,
          street = street,
          postalCode = postalCode,
          city = city,
          country = country
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<MailingAddress> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class BankDetails(
    val __typename: String = "BankDetails",
    /**
     * AlternateBankingAccountHolder of the BankDetails
     */
    val alternateBankingAccountHolder: String?,
    /**
     * iban of the BankDetails
     */
    val iban: String,
    /**
     * bic of the BankDetails
     */
    val bic: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@BankDetails.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@BankDetails.alternateBankingAccountHolder)
      writer.writeString(RESPONSE_FIELDS[2], this@BankDetails.iban)
      writer.writeString(RESPONSE_FIELDS[3], this@BankDetails.bic)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("alternateBankingAccountHolder", "alternateBankingAccountHolder",
              null, true, null),
          ResponseField.forString("iban", "iban", null, false, null),
          ResponseField.forString("bic", "bic", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): BankDetails = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val alternateBankingAccountHolder = readString(RESPONSE_FIELDS[1])
        val iban = readString(RESPONSE_FIELDS[2])!!
        val bic = readString(RESPONSE_FIELDS[3])
        BankDetails(
          __typename = __typename,
          alternateBankingAccountHolder = alternateBankingAccountHolder,
          iban = iban,
          bic = bic
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<BankDetails> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Discount(
    val __typename: String = "Discount",
    /**
     * The amount off
     */
    val amountOff: Int?,
    /**
     * The new monthly rate after the voucher was applied to the deal
     */
    val newRate: Double?,
    /**
     * The type of the discount: AMOUNT | PERCENT
     */
    val type: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Discount.__typename)
      writer.writeInt(RESPONSE_FIELDS[1], this@Discount.amountOff)
      writer.writeDouble(RESPONSE_FIELDS[2], this@Discount.newRate)
      writer.writeString(RESPONSE_FIELDS[3], this@Discount.type)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forInt("amountOff", "amountOff", null, true, null),
          ResponseField.forDouble("newRate", "newRate", null, true, null),
          ResponseField.forString("type", "type", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Discount = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val amountOff = readInt(RESPONSE_FIELDS[1])
        val newRate = readDouble(RESPONSE_FIELDS[2])
        val type = readString(RESPONSE_FIELDS[3])
        Discount(
          __typename = __typename,
          amountOff = amountOff,
          newRate = newRate,
          type = type
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Discount> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Voucher Type.
   */
  data class Voucher(
    val __typename: String = "VoucherType",
    /**
     * The code of the voucher
     */
    val code: String?,
    val discount: Discount?,
    /**
     * The units for the voucher
     */
    val units: Int?,
    /**
     * The campaign of the voucher
     */
    val campaignId: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Voucher.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Voucher.code)
      writer.writeObject(RESPONSE_FIELDS[2], this@Voucher.discount?.marshaller())
      writer.writeInt(RESPONSE_FIELDS[3], this@Voucher.units)
      writer.writeString(RESPONSE_FIELDS[4], this@Voucher.campaignId)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("code", "code", null, true, null),
          ResponseField.forObject("discount", "discount", null, true, null),
          ResponseField.forInt("units", "units", null, true, null),
          ResponseField.forString("campaignId", "campaignId", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Voucher = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val code = readString(RESPONSE_FIELDS[1])
        val discount = readObject<Discount>(RESPONSE_FIELDS[2]) { reader ->
          Discount(reader)
        }
        val units = readInt(RESPONSE_FIELDS[3])
        val campaignId = readString(RESPONSE_FIELDS[4])
        Voucher(
          __typename = __typename,
          code = code,
          discount = discount,
          units = units,
          campaignId = campaignId
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Voucher> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Content(
    val __typename: String = "Content",
    /**
     * Id of the Content
     */
    val id: Int?,
    /**
     * Headline text of the Deal Handover
     */
    val headline: String?,
    /**
     * Body text of the Deal Handover
     */
    val body: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Content.__typename)
      writer.writeInt(RESPONSE_FIELDS[1], this@Content.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Content.headline)
      writer.writeString(RESPONSE_FIELDS[3], this@Content.body)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forInt("id", "id", null, true, null),
          ResponseField.forString("headline", "headline", null, true, null),
          ResponseField.forString("body", "body", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Content = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readInt(RESPONSE_FIELDS[1])
        val headline = readString(RESPONSE_FIELDS[2])
        val body = readString(RESPONSE_FIELDS[3])
        Content(
          __typename = __typename,
          id = id,
          headline = headline,
          body = body
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Content> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Active(
    val __typename: String = "ActiveId",
    /**
     * Id of the Active Content
     */
    val id: Int?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Active.__typename)
      writer.writeInt(RESPONSE_FIELDS[1], this@Active.id)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forInt("id", "id", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Active = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readInt(RESPONSE_FIELDS[1])
        Active(
          __typename = __typename,
          id = id
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Active> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class HandoverContent(
    val __typename: String = "HandoverContent",
    /**
     * List of Content
     */
    val content: List<Content?>?,
    /**
     * Active Id of the Content
     */
    val active: Active?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@HandoverContent.__typename)
      writer.writeList(RESPONSE_FIELDS[1], this@HandoverContent.content) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value?.marshaller())}
      }
      writer.writeObject(RESPONSE_FIELDS[2], this@HandoverContent.active?.marshaller())
    }

    fun contentFilterNotNull(): List<Content>? = content?.filterNotNull()

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forList("content", "content", null, true, null),
          ResponseField.forObject("active", "active", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): HandoverContent = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val content = readList<Content>(RESPONSE_FIELDS[1]) { reader ->
          reader.readObject<Content> { reader ->
            Content(reader)
          }
        }
        val active = readObject<Active>(RESPONSE_FIELDS[2]) { reader ->
          Active(reader)
        }
        HandoverContent(
          __typename = __typename,
          content = content,
          active = active
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<HandoverContent> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class DesiredHandoverAddress(
    val __typename: String = "DesiredHandoverAddress",
    /**
     * Street of the Address
     */
    val street: String?,
    /**
     * PostalCode of the Address
     */
    val postalCode: String?,
    /**
     * City of the Address
     */
    val city: String?,
    /**
     * Country of the Address
     */
    val country: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@DesiredHandoverAddress.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@DesiredHandoverAddress.street)
      writer.writeString(RESPONSE_FIELDS[2], this@DesiredHandoverAddress.postalCode)
      writer.writeString(RESPONSE_FIELDS[3], this@DesiredHandoverAddress.city)
      writer.writeString(RESPONSE_FIELDS[4], this@DesiredHandoverAddress.country)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("street", "street", null, true, null),
          ResponseField.forString("postalCode", "postalCode", null, true, null),
          ResponseField.forString("city", "city", null, true, null),
          ResponseField.forString("country", "country", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): DesiredHandoverAddress = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val street = readString(RESPONSE_FIELDS[1])
        val postalCode = readString(RESPONSE_FIELDS[2])
        val city = readString(RESPONSE_FIELDS[3])
        val country = readString(RESPONSE_FIELDS[4])
        DesiredHandoverAddress(
          __typename = __typename,
          street = street,
          postalCode = postalCode,
          city = city,
          country = country
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<DesiredHandoverAddress> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class HandoverAddress(
    val __typename: String = "HandoverAddress",
    val dealerName: String?,
    val street: String?,
    val postalCode: String?,
    val city: String?,
    val country: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@HandoverAddress.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@HandoverAddress.dealerName)
      writer.writeString(RESPONSE_FIELDS[2], this@HandoverAddress.street)
      writer.writeString(RESPONSE_FIELDS[3], this@HandoverAddress.postalCode)
      writer.writeString(RESPONSE_FIELDS[4], this@HandoverAddress.city)
      writer.writeString(RESPONSE_FIELDS[5], this@HandoverAddress.country)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("dealerName", "dealerName", null, true, null),
          ResponseField.forString("street", "street", null, true, null),
          ResponseField.forString("postalCode", "postalCode", null, true, null),
          ResponseField.forString("city", "city", null, true, null),
          ResponseField.forString("country", "country", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): HandoverAddress = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val dealerName = readString(RESPONSE_FIELDS[1])
        val street = readString(RESPONSE_FIELDS[2])
        val postalCode = readString(RESPONSE_FIELDS[3])
        val city = readString(RESPONSE_FIELDS[4])
        val country = readString(RESPONSE_FIELDS[5])
        HandoverAddress(
          __typename = __typename,
          dealerName = dealerName,
          street = street,
          postalCode = postalCode,
          city = city,
          country = country
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<HandoverAddress> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Offer(
    val __typename: String = "Offer",
    /**
     * ID of the Offer
     */
    val id: String,
    /**
     * Availability of the Offer
     */
    val isAvailable: Boolean,
    /**
     * Make of the Offer
     */
    val make: String,
    /**
     * Model of the Offer
     */
    val model: String,
    /**
     * Version of the Offer
     */
    val version: String?,
    /**
     * Teaser Image of the Offer
     */
    val teaserImage: String,
    /**
     * Starting Fee of the Offer
     */
    val startingFee: Double,
    /**
     * Portfolio of the Offer
     */
    val portfolio: String,
    /**
     * Equipment List of the Offer
     */
    val equipmentList: String?,
    /**
     * PS of the Offer
     */
    val ps: Int?,
    /**
     * KW of the Offer
     */
    val kw: Int?,
    /**
     * Drive type of the Offer
     */
    val drive: String?,
    /**
     * FuelType of the Offer
     */
    val fuelType: String?,
    /**
     * GearingType of the Offer
     */
    val gearingType: String?,
    /**
     * EarliestAvailabilityDays of the Offer
     */
    val earliestAvailabilityDays: Int?,
    /**
     * Annual kilometers allowed of the Offer
     */
    val annualKm: Int?,
    /**
     * Fee for excess kilometers of the Offer
     */
    val excessKmFee: Double?,
    /**
     * Excess allowed monthly kilometers of the Offer
     */
    val excessMonthlyKm: Int?,
    /**
     * Partial Deductable of the Offer
     */
    val partialDeductible: Int?,
    /**
     * Fully Deductable of the Offer
     */
    val fullyDeductable: Int?,
    /**
     * Estimated Delivery Time
     */
    val estimatedDeliveryTime: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Offer.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Offer.id)
      writer.writeBoolean(RESPONSE_FIELDS[2], this@Offer.isAvailable)
      writer.writeString(RESPONSE_FIELDS[3], this@Offer.make)
      writer.writeString(RESPONSE_FIELDS[4], this@Offer.model)
      writer.writeString(RESPONSE_FIELDS[5], this@Offer.version)
      writer.writeString(RESPONSE_FIELDS[6], this@Offer.teaserImage)
      writer.writeDouble(RESPONSE_FIELDS[7], this@Offer.startingFee)
      writer.writeString(RESPONSE_FIELDS[8], this@Offer.portfolio)
      writer.writeString(RESPONSE_FIELDS[9], this@Offer.equipmentList)
      writer.writeInt(RESPONSE_FIELDS[10], this@Offer.ps)
      writer.writeInt(RESPONSE_FIELDS[11], this@Offer.kw)
      writer.writeString(RESPONSE_FIELDS[12], this@Offer.drive)
      writer.writeString(RESPONSE_FIELDS[13], this@Offer.fuelType)
      writer.writeString(RESPONSE_FIELDS[14], this@Offer.gearingType)
      writer.writeInt(RESPONSE_FIELDS[15], this@Offer.earliestAvailabilityDays)
      writer.writeInt(RESPONSE_FIELDS[16], this@Offer.annualKm)
      writer.writeDouble(RESPONSE_FIELDS[17], this@Offer.excessKmFee)
      writer.writeInt(RESPONSE_FIELDS[18], this@Offer.excessMonthlyKm)
      writer.writeInt(RESPONSE_FIELDS[19], this@Offer.partialDeductible)
      writer.writeInt(RESPONSE_FIELDS[20], this@Offer.fullyDeductable)
      writer.writeString(RESPONSE_FIELDS[21], this@Offer.estimatedDeliveryTime)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("id", "id", null, false, null),
          ResponseField.forBoolean("isAvailable", "isAvailable", null, false, null),
          ResponseField.forString("make", "make", null, false, null),
          ResponseField.forString("model", "model", null, false, null),
          ResponseField.forString("version", "version", null, true, null),
          ResponseField.forString("teaserImage", "teaserImage", null, false, null),
          ResponseField.forDouble("startingFee", "startingFee", null, false, null),
          ResponseField.forString("portfolio", "portfolio", null, false, null),
          ResponseField.forString("equipmentList", "equipmentList", null, true, null),
          ResponseField.forInt("ps", "ps", null, true, null),
          ResponseField.forInt("kw", "kw", null, true, null),
          ResponseField.forString("drive", "drive", null, true, null),
          ResponseField.forString("fuelType", "fuelType", null, true, null),
          ResponseField.forString("gearingType", "gearingType", null, true, null),
          ResponseField.forInt("earliestAvailabilityDays", "earliestAvailabilityDays", null, true,
              null),
          ResponseField.forInt("annualKm", "annualKm", null, true, null),
          ResponseField.forDouble("excessKmFee", "excessKmFee", null, true, null),
          ResponseField.forInt("excessMonthlyKm", "excessMonthlyKm", null, true, null),
          ResponseField.forInt("partialDeductible", "partialDeductible", null, true, null),
          ResponseField.forInt("fullyDeductable", "fullyDeductable", null, true, null),
          ResponseField.forString("estimatedDeliveryTime", "estimatedDeliveryTime", null, true,
              null)
          )

      operator fun invoke(reader: ResponseReader): Offer = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readString(RESPONSE_FIELDS[1])!!
        val isAvailable = readBoolean(RESPONSE_FIELDS[2])!!
        val make = readString(RESPONSE_FIELDS[3])!!
        val model = readString(RESPONSE_FIELDS[4])!!
        val version = readString(RESPONSE_FIELDS[5])
        val teaserImage = readString(RESPONSE_FIELDS[6])!!
        val startingFee = readDouble(RESPONSE_FIELDS[7])!!
        val portfolio = readString(RESPONSE_FIELDS[8])!!
        val equipmentList = readString(RESPONSE_FIELDS[9])
        val ps = readInt(RESPONSE_FIELDS[10])
        val kw = readInt(RESPONSE_FIELDS[11])
        val drive = readString(RESPONSE_FIELDS[12])
        val fuelType = readString(RESPONSE_FIELDS[13])
        val gearingType = readString(RESPONSE_FIELDS[14])
        val earliestAvailabilityDays = readInt(RESPONSE_FIELDS[15])
        val annualKm = readInt(RESPONSE_FIELDS[16])
        val excessKmFee = readDouble(RESPONSE_FIELDS[17])
        val excessMonthlyKm = readInt(RESPONSE_FIELDS[18])
        val partialDeductible = readInt(RESPONSE_FIELDS[19])
        val fullyDeductable = readInt(RESPONSE_FIELDS[20])
        val estimatedDeliveryTime = readString(RESPONSE_FIELDS[21])
        Offer(
          __typename = __typename,
          id = id,
          isAvailable = isAvailable,
          make = make,
          model = model,
          version = version,
          teaserImage = teaserImage,
          startingFee = startingFee,
          portfolio = portfolio,
          equipmentList = equipmentList,
          ps = ps,
          kw = kw,
          drive = drive,
          fuelType = fuelType,
          gearingType = gearingType,
          earliestAvailabilityDays = earliestAvailabilityDays,
          annualKm = annualKm,
          excessKmFee = excessKmFee,
          excessMonthlyKm = excessMonthlyKm,
          partialDeductible = partialDeductible,
          fullyDeductable = fullyDeductable,
          estimatedDeliveryTime = estimatedDeliveryTime
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Offer> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Vehicle Type.
   */
  data class Vehicle(
    val __typename: String = "Vehicle",
    /**
     * ID of the vehicle
     */
    val id: String,
    /**
     * License Plate of the vehicle
     */
    val licensePlate: String,
    /**
     * Make of the vehicle
     */
    val make: String,
    /**
     * Model of the vehicle
     */
    val model: String,
    /**
     * Version of the vehicle
     */
    val version: String?,
    /**
     * PS of the vehicle
     */
    val ps: Int,
    /**
     * KW of the vehicle
     */
    val kw: Int,
    /**
     * drive type of the vehicle
     */
    val drive: String?,
    /**
     * Fuel Type of the vehicle
     */
    val fuelType: String,
    /**
     * Gearing Type of the vehicle
     */
    val gearingType: String,
    /**
     * Car Image URL of the vehicle
     */
    val carImage: String,
    /**
     * manuals of the vehicle
     */
    val manuals: List<String?>?,
    /**
     * exterior color of the vehicle
     */
    val exteriorColor: String?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Vehicle.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@Vehicle.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Vehicle.licensePlate)
      writer.writeString(RESPONSE_FIELDS[3], this@Vehicle.make)
      writer.writeString(RESPONSE_FIELDS[4], this@Vehicle.model)
      writer.writeString(RESPONSE_FIELDS[5], this@Vehicle.version)
      writer.writeInt(RESPONSE_FIELDS[6], this@Vehicle.ps)
      writer.writeInt(RESPONSE_FIELDS[7], this@Vehicle.kw)
      writer.writeString(RESPONSE_FIELDS[8], this@Vehicle.drive)
      writer.writeString(RESPONSE_FIELDS[9], this@Vehicle.fuelType)
      writer.writeString(RESPONSE_FIELDS[10], this@Vehicle.gearingType)
      writer.writeString(RESPONSE_FIELDS[11], this@Vehicle.carImage)
      writer.writeList(RESPONSE_FIELDS[12], this@Vehicle.manuals) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeString(value)}
      }
      writer.writeString(RESPONSE_FIELDS[13], this@Vehicle.exteriorColor)
    }

    fun manualsFilterNotNull(): List<String>? = manuals?.filterNotNull()

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, false, CustomType.ID, null),
          ResponseField.forString("licensePlate", "licensePlate", null, false, null),
          ResponseField.forString("make", "make", null, false, null),
          ResponseField.forString("model", "model", null, false, null),
          ResponseField.forString("version", "version", null, true, null),
          ResponseField.forInt("ps", "ps", null, false, null),
          ResponseField.forInt("kw", "kw", null, false, null),
          ResponseField.forString("drive", "drive", null, true, null),
          ResponseField.forString("fuelType", "fuelType", null, false, null),
          ResponseField.forString("gearingType", "gearingType", null, false, null),
          ResponseField.forString("carImage", "carImage", null, false, null),
          ResponseField.forList("manuals", "manuals", null, true, null),
          ResponseField.forString("exteriorColor", "exteriorColor", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Vehicle = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)!!
        val licensePlate = readString(RESPONSE_FIELDS[2])!!
        val make = readString(RESPONSE_FIELDS[3])!!
        val model = readString(RESPONSE_FIELDS[4])!!
        val version = readString(RESPONSE_FIELDS[5])
        val ps = readInt(RESPONSE_FIELDS[6])!!
        val kw = readInt(RESPONSE_FIELDS[7])!!
        val drive = readString(RESPONSE_FIELDS[8])
        val fuelType = readString(RESPONSE_FIELDS[9])!!
        val gearingType = readString(RESPONSE_FIELDS[10])!!
        val carImage = readString(RESPONSE_FIELDS[11])!!
        val manuals = readList<String>(RESPONSE_FIELDS[12]) { reader ->
          reader.readString()
        }
        val exteriorColor = readString(RESPONSE_FIELDS[13])
        Vehicle(
          __typename = __typename,
          id = id,
          licensePlate = licensePlate,
          make = make,
          model = model,
          version = version,
          ps = ps,
          kw = kw,
          drive = drive,
          fuelType = fuelType,
          gearingType = gearingType,
          carImage = carImage,
          manuals = manuals,
          exteriorColor = exteriorColor
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Vehicle> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Type definition for field translation
   */
  data class Labels(
    val __typename: String = "FormFieldTranslationType",
    /**
     * Field label in English
     */
    val en: String,
    /**
     * Field label in German
     */
    val de: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Labels.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Labels.en)
      writer.writeString(RESPONSE_FIELDS[2], this@Labels.de)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("en", "en", null, false, null),
          ResponseField.forString("de", "de", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Labels = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val en = readString(RESPONSE_FIELDS[1])!!
        val de = readString(RESPONSE_FIELDS[2])!!
        Labels(
          __typename = __typename,
          en = en,
          de = de
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Labels> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Serialized Field Type
   */
  data class SerializedDatum(
    val __typename: String = "SerializedFieldType",
    /**
     * Field ID
     */
    val id: String,
    /**
     * Field value
     */
    val value: String,
    /**
     * Field labels
     */
    val labels: Labels?,
    /**
     * Field type
     */
    val type: String,
    /**
     * Field options
     */
    val options: String?,
    /**
     * Field sequence number
     */
    val sequenceNumber: Int?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@SerializedDatum.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@SerializedDatum.id)
      writer.writeString(RESPONSE_FIELDS[2], this@SerializedDatum.value)
      writer.writeObject(RESPONSE_FIELDS[3], this@SerializedDatum.labels?.marshaller())
      writer.writeString(RESPONSE_FIELDS[4], this@SerializedDatum.type)
      writer.writeString(RESPONSE_FIELDS[5], this@SerializedDatum.options)
      writer.writeInt(RESPONSE_FIELDS[6], this@SerializedDatum.sequenceNumber)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("id", "id", null, false, null),
          ResponseField.forString("value", "value", null, false, null),
          ResponseField.forObject("labels", "labels", null, true, null),
          ResponseField.forString("type", "type", null, false, null),
          ResponseField.forString("options", "options", null, true, null),
          ResponseField.forInt("sequenceNumber", "sequenceNumber", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): SerializedDatum = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readString(RESPONSE_FIELDS[1])!!
        val value = readString(RESPONSE_FIELDS[2])!!
        val labels = readObject<Labels>(RESPONSE_FIELDS[3]) { reader ->
          Labels(reader)
        }
        val type = readString(RESPONSE_FIELDS[4])!!
        val options = readString(RESPONSE_FIELDS[5])
        val sequenceNumber = readInt(RESPONSE_FIELDS[6])
        SerializedDatum(
          __typename = __typename,
          id = id,
          value = value,
          labels = labels,
          type = type,
          options = options,
          sequenceNumber = sequenceNumber
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<SerializedDatum> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Damage Report Type
   */
  data class DamageReport(
    val __typename: String = "DamageReport",
    /**
     * ID of the Damage report
     */
    val id: String,
    /**
     * Date when damage report was created
     */
    val createdAt: String?,
    /**
     * Date when damage report was updated
     */
    val updatedAt: String?,
    /**
     * Flag that indicates if damage report needs second step
     */
    val needsSecondStep: Boolean?,
    /**
     * Serialized damage report object
     */
    val serializedData: List<SerializedDatum?>?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@DamageReport.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@DamageReport.id)
      writer.writeString(RESPONSE_FIELDS[2], this@DamageReport.createdAt)
      writer.writeString(RESPONSE_FIELDS[3], this@DamageReport.updatedAt)
      writer.writeBoolean(RESPONSE_FIELDS[4], this@DamageReport.needsSecondStep)
      writer.writeList(RESPONSE_FIELDS[5], this@DamageReport.serializedData) { value,
          listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value?.marshaller())}
      }
    }

    fun serializedDataFilterNotNull(): List<SerializedDatum>? = serializedData?.filterNotNull()

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("id", "id", null, false, null),
          ResponseField.forString("createdAt", "createdAt", null, true, null),
          ResponseField.forString("updatedAt", "updatedAt", null, true, null),
          ResponseField.forBoolean("needsSecondStep", "needsSecondStep", null, true, null),
          ResponseField.forList("serializedData", "serializedData", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): DamageReport = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readString(RESPONSE_FIELDS[1])!!
        val createdAt = readString(RESPONSE_FIELDS[2])
        val updatedAt = readString(RESPONSE_FIELDS[3])
        val needsSecondStep = readBoolean(RESPONSE_FIELDS[4])
        val serializedData = readList<SerializedDatum>(RESPONSE_FIELDS[5]) { reader ->
          reader.readObject<SerializedDatum> { reader ->
            SerializedDatum(reader)
          }
        }
        DamageReport(
          __typename = __typename,
          id = id,
          createdAt = createdAt,
          updatedAt = updatedAt,
          needsSecondStep = needsSecondStep,
          serializedData = serializedData
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<DamageReport> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Booking Type
   */
  data class Booking(
    val __typename: String = "Booking",
    /**
     * ID of the Booking
     */
    val id: String,
    /**
     * Status of the Booking
     */
    val status: String,
    /**
     * StartDate of the Booking
     */
    val startDate: String?,
    /**
     * EndDate of the Booking
     */
    val endDate: String?,
    /**
     * BillingStartDate of the Booking
     */
    val billingStartDate: String?,
    /**
     * BillingEndDate of the Booking
     */
    val billingEndDate: String?,
    /**
     * KM Driven of the Booking
     */
    val kmDriven: Int?,
    /**
     * Included Monthly Kilometers of the Booking
     */
    val includedMonthlyKilometers: Int?,
    /**
     * Type of Delivery of the Booking
     */
    val typeOfDelivery: String?,
    /**
     * Estimated Delivery Date of the Booking
     */
    val estimatedDeliveryDate: String?,
    /**
     * DeliveryPlace of the Booking
     */
    val placeOfDelivery: String?,
    /**
     * Type of Return of the Booking
     */
    val typeOfReturn: String?,
    /**
     * Return Date of the Booking
     */
    val dateOfReturn: String?,
    /**
     * Return Place of the Booking
     */
    val placeOfReturn: String?,
    /**
     * Price per Excess Kilometer Gross of the vehicle
     */
    val pricePerExcessKilometerGross: Double?,
    /**
     * Handover Kilometer of the Booking
     */
    val handoverKilometers: Int?,
    /**
     * HandoverCertificate of the Booking
     */
    val handoverCertificate: Boolean?,
    /**
     * Monthly Rate of the Booking
     */
    val monthlyRate: Double?,
    /**
     * The minimum age of the driver
     */
    val minimumAge: Int?,
    /**
     * Vehicle of the Booking
     */
    val vehicle: Vehicle?,
    /**
     * Damage Reports of the booking
     */
    val damageReports: List<DamageReport?>?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Booking.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Booking.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Booking.status)
      writer.writeString(RESPONSE_FIELDS[3], this@Booking.startDate)
      writer.writeString(RESPONSE_FIELDS[4], this@Booking.endDate)
      writer.writeString(RESPONSE_FIELDS[5], this@Booking.billingStartDate)
      writer.writeString(RESPONSE_FIELDS[6], this@Booking.billingEndDate)
      writer.writeInt(RESPONSE_FIELDS[7], this@Booking.kmDriven)
      writer.writeInt(RESPONSE_FIELDS[8], this@Booking.includedMonthlyKilometers)
      writer.writeString(RESPONSE_FIELDS[9], this@Booking.typeOfDelivery)
      writer.writeString(RESPONSE_FIELDS[10], this@Booking.estimatedDeliveryDate)
      writer.writeString(RESPONSE_FIELDS[11], this@Booking.placeOfDelivery)
      writer.writeString(RESPONSE_FIELDS[12], this@Booking.typeOfReturn)
      writer.writeString(RESPONSE_FIELDS[13], this@Booking.dateOfReturn)
      writer.writeString(RESPONSE_FIELDS[14], this@Booking.placeOfReturn)
      writer.writeDouble(RESPONSE_FIELDS[15], this@Booking.pricePerExcessKilometerGross)
      writer.writeInt(RESPONSE_FIELDS[16], this@Booking.handoverKilometers)
      writer.writeBoolean(RESPONSE_FIELDS[17], this@Booking.handoverCertificate)
      writer.writeDouble(RESPONSE_FIELDS[18], this@Booking.monthlyRate)
      writer.writeInt(RESPONSE_FIELDS[19], this@Booking.minimumAge)
      writer.writeObject(RESPONSE_FIELDS[20], this@Booking.vehicle?.marshaller())
      writer.writeList(RESPONSE_FIELDS[21], this@Booking.damageReports) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value?.marshaller())}
      }
    }

    fun damageReportsFilterNotNull(): List<DamageReport>? = damageReports?.filterNotNull()

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("id", "id", null, false, null),
          ResponseField.forString("status", "status", null, false, null),
          ResponseField.forString("startDate", "startDate", null, true, null),
          ResponseField.forString("endDate", "endDate", null, true, null),
          ResponseField.forString("billingStartDate", "billingStartDate", null, true, null),
          ResponseField.forString("billingEndDate", "billingEndDate", null, true, null),
          ResponseField.forInt("kmDriven", "kmDriven", null, true, null),
          ResponseField.forInt("includedMonthlyKilometers", "includedMonthlyKilometers", null, true,
              null),
          ResponseField.forString("typeOfDelivery", "typeOfDelivery", null, true, null),
          ResponseField.forString("estimatedDeliveryDate", "estimatedDeliveryDate", null, true,
              null),
          ResponseField.forString("placeOfDelivery", "placeOfDelivery", null, true, null),
          ResponseField.forString("typeOfReturn", "typeOfReturn", null, true, null),
          ResponseField.forString("dateOfReturn", "dateOfReturn", null, true, null),
          ResponseField.forString("placeOfReturn", "placeOfReturn", null, true, null),
          ResponseField.forDouble("pricePerExcessKilometerGross", "pricePerExcessKilometerGross",
              null, true, null),
          ResponseField.forInt("handoverKilometers", "handoverKilometers", null, true, null),
          ResponseField.forBoolean("handoverCertificate", "handoverCertificate", null, true, null),
          ResponseField.forDouble("monthlyRate", "monthlyRate", null, true, null),
          ResponseField.forInt("minimumAge", "minimumAge", null, true, null),
          ResponseField.forObject("vehicle", "vehicle", null, true, null),
          ResponseField.forList("damageReports", "damageReports", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Booking = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readString(RESPONSE_FIELDS[1])!!
        val status = readString(RESPONSE_FIELDS[2])!!
        val startDate = readString(RESPONSE_FIELDS[3])
        val endDate = readString(RESPONSE_FIELDS[4])
        val billingStartDate = readString(RESPONSE_FIELDS[5])
        val billingEndDate = readString(RESPONSE_FIELDS[6])
        val kmDriven = readInt(RESPONSE_FIELDS[7])
        val includedMonthlyKilometers = readInt(RESPONSE_FIELDS[8])
        val typeOfDelivery = readString(RESPONSE_FIELDS[9])
        val estimatedDeliveryDate = readString(RESPONSE_FIELDS[10])
        val placeOfDelivery = readString(RESPONSE_FIELDS[11])
        val typeOfReturn = readString(RESPONSE_FIELDS[12])
        val dateOfReturn = readString(RESPONSE_FIELDS[13])
        val placeOfReturn = readString(RESPONSE_FIELDS[14])
        val pricePerExcessKilometerGross = readDouble(RESPONSE_FIELDS[15])
        val handoverKilometers = readInt(RESPONSE_FIELDS[16])
        val handoverCertificate = readBoolean(RESPONSE_FIELDS[17])
        val monthlyRate = readDouble(RESPONSE_FIELDS[18])
        val minimumAge = readInt(RESPONSE_FIELDS[19])
        val vehicle = readObject<Vehicle>(RESPONSE_FIELDS[20]) { reader ->
          Vehicle(reader)
        }
        val damageReports = readList<DamageReport>(RESPONSE_FIELDS[21]) { reader ->
          reader.readObject<DamageReport> { reader ->
            DamageReport(reader)
          }
        }
        Booking(
          __typename = __typename,
          id = id,
          status = status,
          startDate = startDate,
          endDate = endDate,
          billingStartDate = billingStartDate,
          billingEndDate = billingEndDate,
          kmDriven = kmDriven,
          includedMonthlyKilometers = includedMonthlyKilometers,
          typeOfDelivery = typeOfDelivery,
          estimatedDeliveryDate = estimatedDeliveryDate,
          placeOfDelivery = placeOfDelivery,
          typeOfReturn = typeOfReturn,
          dateOfReturn = dateOfReturn,
          placeOfReturn = placeOfReturn,
          pricePerExcessKilometerGross = pricePerExcessKilometerGross,
          handoverKilometers = handoverKilometers,
          handoverCertificate = handoverCertificate,
          monthlyRate = monthlyRate,
          minimumAge = minimumAge,
          vehicle = vehicle,
          damageReports = damageReports
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Booking> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Deal Type
   */
  data class Deal(
    val __typename: String = "Deal",
    /**
     * Id of the Deal
     */
    val id: String,
    /**
     * Status of the Deal
     */
    val status: String,
    /**
     * SubStatus of the Deal
     */
    val subStatus: String?,
    /**
     * Details of deal lost reason
     */
    val lostReasonDetail: String?,
    /**
     * Desired date of (vehicle) delivery (first day of week)
     */
    val desiredDateOfDelivery: String?,
    /**
     * The calculated Monthly Rate of the Deal (includes the rate of the selected Bookable Options)
     */
    val monthlyRate: Double,
    /**
     * The startingFee of a deal
     */
    val startingFee: Double?,
    /**
     * The deliveryFee of a deal
     */
    val deliveryFee: Double?,
    /**
     * An information text that can be shown to the customer
     */
    val infoboxText: String?,
    /**
     * The minimum age of the driver
     */
    val minimumAge: Int?,
    /**
     * Voucher used in the deal
     */
    val voucher: Voucher?,
    /**
     * The minimumDuration of a deal
     */
    val minimumDuration: String?,
    /**
     * The selected Bookable Options
     */
    val bookableOptions: List<String?>?,
    /**
     * Is the deal signed by the user?
     */
    val isSigned: Boolean,
    /**
     * The Text Content for the Deal Handover
     */
    val handoverContent: HandoverContent?,
    /**
     * Deals Desired Handover Address
     */
    val desiredHandoverAddress: DesiredHandoverAddress?,
    /**
     * The handoverType of a deal
     */
    val handoverType: String?,
    /**
     * The handover Date of a deal
     */
    val handoverDate: String?,
    /**
     * The handover Address of a deal
     */
    val handoverAddress: HandoverAddress?,
    /**
     * Offer of the Deal
     */
    val offer: Offer,
    /**
     * Created date of deal
     */
    val date: String,
    /**
     * Bookings of the Deal
     */
    val bookings: List<Booking?>?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Deal.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Deal.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Deal.status)
      writer.writeString(RESPONSE_FIELDS[3], this@Deal.subStatus)
      writer.writeString(RESPONSE_FIELDS[4], this@Deal.lostReasonDetail)
      writer.writeString(RESPONSE_FIELDS[5], this@Deal.desiredDateOfDelivery)
      writer.writeDouble(RESPONSE_FIELDS[6], this@Deal.monthlyRate)
      writer.writeDouble(RESPONSE_FIELDS[7], this@Deal.startingFee)
      writer.writeDouble(RESPONSE_FIELDS[8], this@Deal.deliveryFee)
      writer.writeString(RESPONSE_FIELDS[9], this@Deal.infoboxText)
      writer.writeInt(RESPONSE_FIELDS[10], this@Deal.minimumAge)
      writer.writeObject(RESPONSE_FIELDS[11], this@Deal.voucher?.marshaller())
      writer.writeString(RESPONSE_FIELDS[12], this@Deal.minimumDuration)
      writer.writeList(RESPONSE_FIELDS[13], this@Deal.bookableOptions) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeString(value)}
      }
      writer.writeBoolean(RESPONSE_FIELDS[14], this@Deal.isSigned)
      writer.writeObject(RESPONSE_FIELDS[15], this@Deal.handoverContent?.marshaller())
      writer.writeObject(RESPONSE_FIELDS[16], this@Deal.desiredHandoverAddress?.marshaller())
      writer.writeString(RESPONSE_FIELDS[17], this@Deal.handoverType)
      writer.writeString(RESPONSE_FIELDS[18], this@Deal.handoverDate)
      writer.writeObject(RESPONSE_FIELDS[19], this@Deal.handoverAddress?.marshaller())
      writer.writeObject(RESPONSE_FIELDS[20], this@Deal.offer.marshaller())
      writer.writeString(RESPONSE_FIELDS[21], this@Deal.date)
      writer.writeList(RESPONSE_FIELDS[22], this@Deal.bookings) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value?.marshaller())}
      }
    }

    fun bookableOptionsFilterNotNull(): List<String>? = bookableOptions?.filterNotNull()

    fun bookingsFilterNotNull(): List<Booking>? = bookings?.filterNotNull()

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("id", "id", null, false, null),
          ResponseField.forString("status", "status", null, false, null),
          ResponseField.forString("subStatus", "subStatus", null, true, null),
          ResponseField.forString("lostReasonDetail", "lostReasonDetail", null, true, null),
          ResponseField.forString("desiredDateOfDelivery", "desiredDateOfDelivery", null, true,
              null),
          ResponseField.forDouble("monthlyRate", "monthlyRate", null, false, null),
          ResponseField.forDouble("startingFee", "startingFee", null, true, null),
          ResponseField.forDouble("deliveryFee", "deliveryFee", null, true, null),
          ResponseField.forString("infoboxText", "infoboxText", null, true, null),
          ResponseField.forInt("minimumAge", "minimumAge", null, true, null),
          ResponseField.forObject("voucher", "voucher", null, true, null),
          ResponseField.forString("minimumDuration", "minimumDuration", null, true, null),
          ResponseField.forList("bookableOptions", "bookableOptions", null, true, null),
          ResponseField.forBoolean("isSigned", "isSigned", null, false, null),
          ResponseField.forObject("handoverContent", "handoverContent", null, true, null),
          ResponseField.forObject("desiredHandoverAddress", "desiredHandoverAddress", null, true,
              null),
          ResponseField.forString("handoverType", "handoverType", null, true, null),
          ResponseField.forString("handoverDate", "handoverDate", null, true, null),
          ResponseField.forObject("handoverAddress", "handoverAddress", null, true, null),
          ResponseField.forObject("offer", "offer", null, false, null),
          ResponseField.forString("date", "date", null, false, null),
          ResponseField.forList("bookings", "bookings", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Deal = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readString(RESPONSE_FIELDS[1])!!
        val status = readString(RESPONSE_FIELDS[2])!!
        val subStatus = readString(RESPONSE_FIELDS[3])
        val lostReasonDetail = readString(RESPONSE_FIELDS[4])
        val desiredDateOfDelivery = readString(RESPONSE_FIELDS[5])
        val monthlyRate = readDouble(RESPONSE_FIELDS[6])!!
        val startingFee = readDouble(RESPONSE_FIELDS[7])
        val deliveryFee = readDouble(RESPONSE_FIELDS[8])
        val infoboxText = readString(RESPONSE_FIELDS[9])
        val minimumAge = readInt(RESPONSE_FIELDS[10])
        val voucher = readObject<Voucher>(RESPONSE_FIELDS[11]) { reader ->
          Voucher(reader)
        }
        val minimumDuration = readString(RESPONSE_FIELDS[12])
        val bookableOptions = readList<String>(RESPONSE_FIELDS[13]) { reader ->
          reader.readString()
        }
        val isSigned = readBoolean(RESPONSE_FIELDS[14])!!
        val handoverContent = readObject<HandoverContent>(RESPONSE_FIELDS[15]) { reader ->
          HandoverContent(reader)
        }
        val desiredHandoverAddress = readObject<DesiredHandoverAddress>(RESPONSE_FIELDS[16]) {
            reader ->
          DesiredHandoverAddress(reader)
        }
        val handoverType = readString(RESPONSE_FIELDS[17])
        val handoverDate = readString(RESPONSE_FIELDS[18])
        val handoverAddress = readObject<HandoverAddress>(RESPONSE_FIELDS[19]) { reader ->
          HandoverAddress(reader)
        }
        val offer = readObject<Offer>(RESPONSE_FIELDS[20]) { reader ->
          Offer(reader)
        }!!
        val date = readString(RESPONSE_FIELDS[21])!!
        val bookings = readList<Booking>(RESPONSE_FIELDS[22]) { reader ->
          reader.readObject<Booking> { reader ->
            Booking(reader)
          }
        }
        Deal(
          __typename = __typename,
          id = id,
          status = status,
          subStatus = subStatus,
          lostReasonDetail = lostReasonDetail,
          desiredDateOfDelivery = desiredDateOfDelivery,
          monthlyRate = monthlyRate,
          startingFee = startingFee,
          deliveryFee = deliveryFee,
          infoboxText = infoboxText,
          minimumAge = minimumAge,
          voucher = voucher,
          minimumDuration = minimumDuration,
          bookableOptions = bookableOptions,
          isSigned = isSigned,
          handoverContent = handoverContent,
          desiredHandoverAddress = desiredHandoverAddress,
          handoverType = handoverType,
          handoverDate = handoverDate,
          handoverAddress = handoverAddress,
          offer = offer,
          date = date,
          bookings = bookings
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Deal> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * User Type
   */
  data class User(
    val __typename: String = "User",
    /**
     * ID of the User
     */
    val id: String,
    /**
     * Salutation of the User
     */
    val salutation: String?,
    /**
     * Academic Title of the User
     */
    val academicTitle: String?,
    /**
     * Firstname of the User
     */
    val firstname: String,
    /**
     * Lastname of the User
     */
    val lastname: String,
    /**
     * Flag that indicates that the profile of the User is complete
     */
    val isProfileComplete: Boolean,
    /**
     * Does EmploymentDetails exist for the User?
     */
    val hasEmploymentDetails: Boolean,
    /**
     * E-Mail of the User
     */
    val email: String,
    /**
     * phone of the User
     */
    val phone: String?,
    /**
     * CRC Referral Code of the User
     */
    val crcReferralCode: String?,
    /**
     * How often the CRC Referral Code of the user was used
     */
    val numberOfReferrals: Int?,
    /**
     * Referral savings of the User
     */
    val referralSavings: Double?,
    /**
     * Birthdate of the User
     */
    val birthdate: String?,
    /**
     * Is this user private or connected to a company
     */
    val isPerson: Boolean,
    /**
     * EmploymentType private | selfemployed
     */
    val employmentType: String?,
    /**
     * Flag that indicates if a user can complete his profile or not.
     */
    val canCompleteProfile: Boolean,
    /**
     * Flag that indicates if a user's personal data is editable or not.
     */
    val hasPersonalData: Boolean,
    /**
     * Do Proof of Other Income documents exist for the User=
     */
    val hasProofOfOtherIncome: Boolean,
    /**
     * Does BankDetails exist for the User?
     */
    val hasBankDetails: Boolean,
    /**
     * Do DriversLicense documents exist for the User?
     */
    val hasDriversLicense: Boolean,
    /**
     * Do Proof of Income documents exist for the User?
     */
    val hasProofOfIncome: Boolean,
    /**
     * Does an IdentityProof exist for the User?
     */
    val hasIdentityProof: Boolean,
    /**
     * Identity Proof information for the User
     */
    val identityProof: IdentityProof?,
    /**
     * Does a SelfDisclosure exist for the User?
     */
    val hasSelfDisclosure: Boolean,
    /**
     * SelfDisclosure for the User
     */
    val selfDisclosure: SelfDisclosure?,
    /**
     * Status of Newsletter Subscribtion of the User
     */
    val newsletterSubscribed: Boolean,
    /**
     * Does Scoring information exist for the User?
     */
    val hasScoring: Boolean,
    /**
     * Scoring of the User
     */
    val scoring: Scoring?,
    /**
     * MailingAddress of the User
     */
    val mailingAddress: MailingAddress?,
    /**
     * BankDetails of the User
     */
    val bankDetails: BankDetails?,
    /**
     * Deals of the User
     */
    val deals: List<Deal>,
    /**
     * Errors of the Query
     */
    val errors: List<String?>
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@User.__typename)
      writer.writeCustom(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField, this@User.id)
      writer.writeString(RESPONSE_FIELDS[2], this@User.salutation)
      writer.writeString(RESPONSE_FIELDS[3], this@User.academicTitle)
      writer.writeString(RESPONSE_FIELDS[4], this@User.firstname)
      writer.writeString(RESPONSE_FIELDS[5], this@User.lastname)
      writer.writeBoolean(RESPONSE_FIELDS[6], this@User.isProfileComplete)
      writer.writeBoolean(RESPONSE_FIELDS[7], this@User.hasEmploymentDetails)
      writer.writeString(RESPONSE_FIELDS[8], this@User.email)
      writer.writeString(RESPONSE_FIELDS[9], this@User.phone)
      writer.writeString(RESPONSE_FIELDS[10], this@User.crcReferralCode)
      writer.writeInt(RESPONSE_FIELDS[11], this@User.numberOfReferrals)
      writer.writeDouble(RESPONSE_FIELDS[12], this@User.referralSavings)
      writer.writeString(RESPONSE_FIELDS[13], this@User.birthdate)
      writer.writeBoolean(RESPONSE_FIELDS[14], this@User.isPerson)
      writer.writeString(RESPONSE_FIELDS[15], this@User.employmentType)
      writer.writeBoolean(RESPONSE_FIELDS[16], this@User.canCompleteProfile)
      writer.writeBoolean(RESPONSE_FIELDS[17], this@User.hasPersonalData)
      writer.writeBoolean(RESPONSE_FIELDS[18], this@User.hasProofOfOtherIncome)
      writer.writeBoolean(RESPONSE_FIELDS[19], this@User.hasBankDetails)
      writer.writeBoolean(RESPONSE_FIELDS[20], this@User.hasDriversLicense)
      writer.writeBoolean(RESPONSE_FIELDS[21], this@User.hasProofOfIncome)
      writer.writeBoolean(RESPONSE_FIELDS[22], this@User.hasIdentityProof)
      writer.writeObject(RESPONSE_FIELDS[23], this@User.identityProof?.marshaller())
      writer.writeBoolean(RESPONSE_FIELDS[24], this@User.hasSelfDisclosure)
      writer.writeObject(RESPONSE_FIELDS[25], this@User.selfDisclosure?.marshaller())
      writer.writeBoolean(RESPONSE_FIELDS[26], this@User.newsletterSubscribed)
      writer.writeBoolean(RESPONSE_FIELDS[27], this@User.hasScoring)
      writer.writeObject(RESPONSE_FIELDS[28], this@User.scoring?.marshaller())
      writer.writeObject(RESPONSE_FIELDS[29], this@User.mailingAddress?.marshaller())
      writer.writeObject(RESPONSE_FIELDS[30], this@User.bankDetails?.marshaller())
      writer.writeList(RESPONSE_FIELDS[31], this@User.deals) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value.marshaller())}
      }
      writer.writeList(RESPONSE_FIELDS[32], this@User.errors) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeString(value)}
      }
    }

    fun errorsFilterNotNull(): List<String> = errors.filterNotNull()

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forCustomType("id", "id", null, false, CustomType.ID, null),
          ResponseField.forString("salutation", "salutation", null, true, null),
          ResponseField.forString("academicTitle", "academicTitle", null, true, null),
          ResponseField.forString("firstname", "firstname", null, false, null),
          ResponseField.forString("lastname", "lastname", null, false, null),
          ResponseField.forBoolean("isProfileComplete", "isProfileComplete", null, false, null),
          ResponseField.forBoolean("hasEmploymentDetails", "hasEmploymentDetails", null, false,
              null),
          ResponseField.forString("email", "email", null, false, null),
          ResponseField.forString("phone", "phone", null, true, null),
          ResponseField.forString("crcReferralCode", "crcReferralCode", null, true, null),
          ResponseField.forInt("numberOfReferrals", "numberOfReferrals", null, true, null),
          ResponseField.forDouble("referralSavings", "referralSavings", null, true, null),
          ResponseField.forString("birthdate", "birthdate", null, true, null),
          ResponseField.forBoolean("isPerson", "isPerson", null, false, null),
          ResponseField.forString("employmentType", "employmentType", null, true, null),
          ResponseField.forBoolean("canCompleteProfile", "canCompleteProfile", null, false, null),
          ResponseField.forBoolean("hasPersonalData", "hasPersonalData", null, false, null),
          ResponseField.forBoolean("hasProofOfOtherIncome", "hasProofOfOtherIncome", null, false,
              null),
          ResponseField.forBoolean("hasBankDetails", "hasBankDetails", null, false, null),
          ResponseField.forBoolean("hasDriversLicense", "hasDriversLicense", null, false, null),
          ResponseField.forBoolean("hasProofOfIncome", "hasProofOfIncome", null, false, null),
          ResponseField.forBoolean("hasIdentityProof", "hasIdentityProof", null, false, null),
          ResponseField.forObject("identityProof", "identityProof", null, true, null),
          ResponseField.forBoolean("hasSelfDisclosure", "hasSelfDisclosure", null, false, null),
          ResponseField.forObject("selfDisclosure", "selfDisclosure", null, true, null),
          ResponseField.forBoolean("newsletterSubscribed", "newsletterSubscribed", null, false,
              null),
          ResponseField.forBoolean("hasScoring", "hasScoring", null, false, null),
          ResponseField.forObject("scoring", "scoring", null, true, null),
          ResponseField.forObject("mailingAddress", "mailingAddress", null, true, null),
          ResponseField.forObject("bankDetails", "bankDetails", null, true, null),
          ResponseField.forList("deals", "deals", null, false, null),
          ResponseField.forList("errors", "errors", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): User = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readCustomType<String>(RESPONSE_FIELDS[1] as ResponseField.CustomTypeField)!!
        val salutation = readString(RESPONSE_FIELDS[2])
        val academicTitle = readString(RESPONSE_FIELDS[3])
        val firstname = readString(RESPONSE_FIELDS[4])!!
        val lastname = readString(RESPONSE_FIELDS[5])!!
        val isProfileComplete = readBoolean(RESPONSE_FIELDS[6])!!
        val hasEmploymentDetails = readBoolean(RESPONSE_FIELDS[7])!!
        val email = readString(RESPONSE_FIELDS[8])!!
        val phone = readString(RESPONSE_FIELDS[9])
        val crcReferralCode = readString(RESPONSE_FIELDS[10])
        val numberOfReferrals = readInt(RESPONSE_FIELDS[11])
        val referralSavings = readDouble(RESPONSE_FIELDS[12])
        val birthdate = readString(RESPONSE_FIELDS[13])
        val isPerson = readBoolean(RESPONSE_FIELDS[14])!!
        val employmentType = readString(RESPONSE_FIELDS[15])
        val canCompleteProfile = readBoolean(RESPONSE_FIELDS[16])!!
        val hasPersonalData = readBoolean(RESPONSE_FIELDS[17])!!
        val hasProofOfOtherIncome = readBoolean(RESPONSE_FIELDS[18])!!
        val hasBankDetails = readBoolean(RESPONSE_FIELDS[19])!!
        val hasDriversLicense = readBoolean(RESPONSE_FIELDS[20])!!
        val hasProofOfIncome = readBoolean(RESPONSE_FIELDS[21])!!
        val hasIdentityProof = readBoolean(RESPONSE_FIELDS[22])!!
        val identityProof = readObject<IdentityProof>(RESPONSE_FIELDS[23]) { reader ->
          IdentityProof(reader)
        }
        val hasSelfDisclosure = readBoolean(RESPONSE_FIELDS[24])!!
        val selfDisclosure = readObject<SelfDisclosure>(RESPONSE_FIELDS[25]) { reader ->
          SelfDisclosure(reader)
        }
        val newsletterSubscribed = readBoolean(RESPONSE_FIELDS[26])!!
        val hasScoring = readBoolean(RESPONSE_FIELDS[27])!!
        val scoring = readObject<Scoring>(RESPONSE_FIELDS[28]) { reader ->
          Scoring(reader)
        }
        val mailingAddress = readObject<MailingAddress>(RESPONSE_FIELDS[29]) { reader ->
          MailingAddress(reader)
        }
        val bankDetails = readObject<BankDetails>(RESPONSE_FIELDS[30]) { reader ->
          BankDetails(reader)
        }
        val deals = readList<Deal>(RESPONSE_FIELDS[31]) { reader ->
          reader.readObject<Deal> { reader ->
            Deal(reader)
          }
        }!!.map { it!! }
        val errors = readList<String>(RESPONSE_FIELDS[32]) { reader ->
          reader.readString()
        }!!
        User(
          __typename = __typename,
          id = id,
          salutation = salutation,
          academicTitle = academicTitle,
          firstname = firstname,
          lastname = lastname,
          isProfileComplete = isProfileComplete,
          hasEmploymentDetails = hasEmploymentDetails,
          email = email,
          phone = phone,
          crcReferralCode = crcReferralCode,
          numberOfReferrals = numberOfReferrals,
          referralSavings = referralSavings,
          birthdate = birthdate,
          isPerson = isPerson,
          employmentType = employmentType,
          canCompleteProfile = canCompleteProfile,
          hasPersonalData = hasPersonalData,
          hasProofOfOtherIncome = hasProofOfOtherIncome,
          hasBankDetails = hasBankDetails,
          hasDriversLicense = hasDriversLicense,
          hasProofOfIncome = hasProofOfIncome,
          hasIdentityProof = hasIdentityProof,
          identityProof = identityProof,
          hasSelfDisclosure = hasSelfDisclosure,
          selfDisclosure = selfDisclosure,
          newsletterSubscribed = newsletterSubscribed,
          hasScoring = hasScoring,
          scoring = scoring,
          mailingAddress = mailingAddress,
          bankDetails = bankDetails,
          deals = deals,
          errors = errors
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<User> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  data class Data(
    /**
     * This will return data of a single User based on the id provided
     */
    val user: User?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.user?.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("user", "user", mapOf<String, Any?>(
            "id" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "id")), true, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val user = readObject<User>(RESPONSE_FIELDS[0]) { reader ->
          User(reader)
        }
        Data(
          user = user
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "cd3101e18d9fa411245cea53a5cfcce0fb301f285a6a9296c5ac2047aadd8209"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query User(${'$'}id: String!) {
          |  user(id: ${'$'}id) {
          |    __typename
          |    id
          |    salutation
          |    academicTitle
          |    firstname
          |    lastname
          |    isProfileComplete
          |    hasEmploymentDetails
          |    email
          |    phone
          |    crcReferralCode
          |    numberOfReferrals
          |    referralSavings
          |    birthdate
          |    isPerson
          |    employmentType
          |    canCompleteProfile
          |    hasPersonalData
          |    hasProofOfOtherIncome
          |    hasBankDetails
          |    hasDriversLicense
          |    hasProofOfIncome
          |    hasIdentityProof
          |    identityProof {
          |      __typename
          |      result
          |    }
          |    hasSelfDisclosure
          |    selfDisclosure {
          |      __typename
          |      hasPermanentContract
          |      employedUntil
          |      employedSince
          |      incomeNet
          |      incomeOther
          |    }
          |    newsletterSubscribed
          |    hasScoring
          |    scoring {
          |      __typename
          |      result
          |    }
          |    mailingAddress {
          |      __typename
          |      street
          |      postalCode
          |      city
          |      country
          |    }
          |    bankDetails {
          |      __typename
          |      alternateBankingAccountHolder
          |      iban
          |      bic
          |    }
          |    deals {
          |      __typename
          |      id
          |      status
          |      subStatus
          |      lostReasonDetail
          |      desiredDateOfDelivery
          |      monthlyRate
          |      startingFee
          |      deliveryFee
          |      infoboxText
          |      minimumAge
          |      voucher {
          |        __typename
          |        code
          |        discount {
          |          __typename
          |          amountOff
          |          newRate
          |          type
          |        }
          |        units
          |        campaignId
          |      }
          |      minimumDuration
          |      bookableOptions
          |      isSigned
          |      handoverContent {
          |        __typename
          |        content {
          |          __typename
          |          id
          |          headline
          |          body
          |        }
          |        active {
          |          __typename
          |          id
          |        }
          |      }
          |      desiredHandoverAddress {
          |        __typename
          |        street
          |        postalCode
          |        city
          |        country
          |      }
          |      handoverType
          |      handoverDate
          |      handoverAddress {
          |        __typename
          |        dealerName
          |        street
          |        postalCode
          |        city
          |        country
          |      }
          |      offer {
          |        __typename
          |        id
          |        isAvailable
          |        make
          |        model
          |        version
          |        teaserImage
          |        startingFee
          |        portfolio
          |        equipmentList
          |        ps
          |        kw
          |        drive
          |        fuelType
          |        gearingType
          |        earliestAvailabilityDays
          |        annualKm
          |        excessKmFee
          |        excessMonthlyKm
          |        partialDeductible
          |        fullyDeductable
          |        estimatedDeliveryTime
          |      }
          |      date
          |      bookings {
          |        __typename
          |        id
          |        status
          |        startDate
          |        endDate
          |        billingStartDate
          |        billingEndDate
          |        kmDriven
          |        includedMonthlyKilometers
          |        typeOfDelivery
          |        estimatedDeliveryDate
          |        placeOfDelivery
          |        typeOfReturn
          |        dateOfReturn
          |        placeOfReturn
          |        pricePerExcessKilometerGross
          |        handoverKilometers
          |        handoverCertificate
          |        monthlyRate
          |        minimumAge
          |        vehicle {
          |          __typename
          |          id
          |          licensePlate
          |          make
          |          model
          |          version
          |          ps
          |          kw
          |          drive
          |          fuelType
          |          gearingType
          |          carImage
          |          manuals
          |          exteriorColor
          |        }
          |        damageReports {
          |          __typename
          |          id
          |          createdAt
          |          updatedAt
          |          needsSecondStep
          |          serializedData {
          |            __typename
          |            id
          |            value
          |            labels {
          |              __typename
          |              en
          |              de
          |            }
          |            type
          |            options
          |            sequenceNumber
          |          }
          |        }
          |      }
          |    }
          |    errors
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String = "User"
    }
  }
}
